{"version":3,"sources":["components/Statistics/Statistics.module.css","components/Section/Section.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Notification/Notification.module.css","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Statistics/StatisticsList.js","components/Statistics/Statistics.js","components/Section/Section.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","FeedbackOptions","onLeaveFeedback","options","map","option","index","type","onClick","className","s","button","Notification","message","StatisticsList","good","neutral","bad","total","positivePercentage","list","item","Statistics","title","Section","children","container","App","useState","setGood","setNeutral","setBad","countTotalFeedback","Math","round","countPositiveFeedbackPercentage","evt","feedBackType","target","textContent","toLowerCase","prevGood","prevNeutral","prevBad","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3acad5e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Statistics_title__3PVIg\",\"list\":\"Statistics_list__3oKT7\",\"item\":\"Statistics_item__1vE2T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__37ABw\",\"title\":\"Section_title__2S6oE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__3n-hy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notification_message__eciZi\"};","import PropTypes from 'prop-types';\nimport s from './FeedbackOptions.module.css';\n\nconst FeedbackOptions = ({onLeaveFeedback, options}) => (\n    <div>\n        {options.map((option, index) => (\n            <button \n            key={index}\n            type=\"button\" \n            onClick={onLeaveFeedback}\n            className={s.button}\n            >\n                {option}\n            </button>\n        ))}\n    </div>\n);\n\nFeedbackOptions.propTypes = {\n    onLeaveFeedback: PropTypes.func.isRequired,\n    options: PropTypes.arrayOf(PropTypes.string)\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\nimport s from './Notification.module.css';\n\nconst Notification = ({message}) => (\n    <p className={s.message}>{message}</p>\n);\n\nNotification.propTypes = {\n    message: PropTypes.string,\n};\n\nexport default Notification;","import PropTypes from 'prop-types';\nimport s from './Statistics.module.css'\n\nconst StatisticsList = ({ good, neutral, bad, total, positivePercentage }) => (\n    <ul className={s.list}>\n        <li className={s.item}>Good: <span>{good}</span></li>\n        <li className={s.item}>Neutral: <span>{neutral}</span></li>\n        <li className={s.item}>Bad: <span>{bad}</span></li>\n        <li className={s.item}>Total: <span>{total}</span></li>\n        <li className={s.item}>Positive feedback: <span>{positivePercentage}%</span></li>\n    </ul>\n);\n\nStatisticsList.propTypes = {\n    good: PropTypes.number,\n    neutral: PropTypes.number,\n    bad: PropTypes.number,\n    total: PropTypes.number,\n    positivePercentage: PropTypes.number,\n};\n\nexport default StatisticsList;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Notification from '../Notification/Notification';\nimport StatisticsList from './StatisticsList';\nimport s from './Statistics.module.css'\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n    <div>\n        <h2 className={s.title}>Statistics</h2>\n        {total === 0 \n            ? <Notification message=\"No feedback given\" /> \n            : <StatisticsList good={good} neutral={neutral} bad={bad} total={total} positivePercentage={positivePercentage} />\n        }\n    </div>\n);\n\nStatistics.propTypes = {\n    good: PropTypes.number,\n    neutral: PropTypes.number,\n    bad: PropTypes.number,\n    total: PropTypes.number,\n    positivePercentage: PropTypes.number,\n};\n\nexport default Statistics;","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nconst Section = ({title, children}) => (\n    <div className={s.container}>\n    <h2 className={s.title}>{title}</h2>\n    {children}\n    </div>\n);\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.node,\n};\n\nexport default Section;","import React, { useState } from 'react';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistics from './components/Statistics';\nimport Section from './components/Section';\n\n\nfunction App () {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const countTotalFeedback = () => {\n    return (good + neutral + bad)\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const total = countTotalFeedback();\n    return Math.round((good * 100) / total);\n  };\n\n  const handleIncrement = (evt) => {\n      const feedBackType = evt.target.textContent.toLowerCase();\n      if(feedBackType === 'good') {\n        setGood((prevGood) => (prevGood + 1));\n\n      } else if(feedBackType === 'neutral') {\n        setNeutral((prevNeutral) => (prevNeutral + 1));\n\n      } else if (feedBackType === 'bad') {\n        setBad((prevBad) => (prevBad + 1));\n      };\n  };\n\n    const total = countTotalFeedback();\n    const positivePercentage = countPositiveFeedbackPercentage();\n    return (\n        <>\n          <Section title=\"Please leave feedback\">\n            <FeedbackOptions options={['Good', 'Neutral', 'Bad']} onLeaveFeedback={handleIncrement} />\n            <Statistics good={good} neutral={neutral} bad={bad} total={total} positivePercentage={positivePercentage} />\n          </Section>\n        </>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}